generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant organization
model Tenant {
  id            String    @id @default(cuid())
  name          String
  domain        String?   @unique
  subscription  String    @default("basic") // basic, premium, enterprise
  gpsServer     String?
  gpsAccount    String?
  gpsPassword   String?
  maxVehicles   Int       @default(10)
  features      String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  users         User[]
  vehicles      Vehicle[]
  drivers       Driver[]
  alerts        Alert[]
}

// Users with multi-tenant support
model User {
  id            String    @id @default(cuid())
  tenantId      String
  email         String    @unique
  password      String
  name          String?
  role          String    @default("viewer") // admin, operator, viewer
  permissions   String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessions      Session[]

  @@index([tenantId])
}

// Session management for NextAuth
model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Vehicle management
model Vehicle {
  id            String    @id @default(cuid())
  tenantId      String
  deviceId      String    // 808GPS device ID
  name          String
  plateNumber   String?
  vehicleType   String    @default("truck") // truck, trailer, bus
  brand         String?
  model         String?
  year          Int?
  color         String?
  cameraConfig  Json?     // Camera configuration
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  driver        Driver?   @relation(fields: [driverId], references: [id])
  driverId      String?
  gpsData       GpsData[]
  alerts        Alert[]
  aiDetections  AiDetection[]

  @@unique([tenantId, deviceId])
  @@index([tenantId])
  @@index([deviceId])
}

// Driver management
model Driver {
  id            String    @id @default(cuid())
  tenantId      String
  name          String
  licenseNumber String?
  phone         String?
  email         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicles      Vehicle[]

  @@index([tenantId])
}

// GPS tracking data (time-series)
model GpsData {
  id            BigInt    @id @default(autoincrement())
  vehicleId     String
  latitude      Float
  longitude     Float
  speed         Int?      // km/h
  heading       Int?      // degrees
  altitude      Float?
  satellites    Int?
  timestamp     DateTime
  createdAt     DateTime  @default(now())

  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, timestamp])
  @@index([timestamp])
}

// AI Detection data
model AiDetection {
  id            BigInt    @id @default(autoincrement())
  vehicleId     String
  cameraChannel String    // CH1, CH2, CH3, CH4
  detectionType String    // fatigue, phone, smoking, collision_warning
  confidence    Float     // 0-1
  snapshotUrl   String?
  metadata      Json?
  timestamp     DateTime
  createdAt     DateTime  @default(now())

  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, timestamp])
  @@index([detectionType, timestamp])
}

// Alerts and notifications
model Alert {
  id            String    @id @default(cuid())
  tenantId      String
  vehicleId     String?
  alertType     String    // speed, geofence, ai_detection, device_offline
  severity      String    // low, medium, high, critical
  title         String
  description   String?
  metadata      Json?
  isRead        Boolean   @default(false)
  isResolved    Boolean   @default(false)
  timestamp     DateTime
  createdAt     DateTime  @default(now())

  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])

  @@index([tenantId, isRead])
  @@index([vehicleId])
  @@index([timestamp])
}