apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: file("../../../../node_modules/react-native-config/android/dotenv.gradle")

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
    /* Autolinking */
    autolinkLibrariesWithApp()
    
    /* Use existing bundle if available */
    bundleAssetName = "index.android.bundle"
    entryFile = file("../../index.js")
    
    /* Metro config for monorepo */
    cliFile = file("../../../../node_modules/react-native/cli.js")
    hermesCommand = "../../../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"

    /* Disable bundling for both debug and release (we prebundle) */
    debuggableVariants = ["debug", "release"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * Whether to enable the Hermes VM.
 */
def hermesEnabled = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.fishivo"
    
    buildFeatures {
        buildConfig true
    }
    
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
    
    defaultConfig {
        applicationId "com.fishivo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
        buildConfigField "boolean", "IS_HERMES_ENABLED", "true"
        
        multiDexEnabled true
        
        // Limit ABIs to ARM only to avoid x86/x86_64 native builds in release
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('FISHIVO_RELEASE_STORE_FILE')) {
                storeFile file(FISHIVO_RELEASE_STORE_FILE)
                storePassword FISHIVO_RELEASE_STORE_PASSWORD
                keyAlias FISHIVO_RELEASE_KEY_ALIAS
                keyPassword FISHIVO_RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            
            debuggable false
            jniDebuggable false
            
            // Enable zipAlign optimization
            zipAlignEnabled true
        }
    }
    
    // Split APKs by ABI to reduce APK size
    splits {
        abi {
            enable false
        }
    }
    
    // Bundle configuration for better performance
    bundle {
        language {
            enableSplit = false // Keep all languages for now
        }
        density {
            enableSplit = true // Split by screen density
        }
        abi {
            enableSplit = true // Split by ABI
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")
    
    // Manual react-native-vector-icons dependency
    implementation project(':react-native-vector-icons')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Backward compatibility for legacy RN bundle task names
// Some third-party gradle scripts may still reference bundle*JsAndAssets tasks.
// Map them to the new tasks introduced by RN Gradle Plugin (createBundle*JsAndAssets).
if (project == rootProject.findProject(":app")) {
    tasks.register("bundleReleaseJsAndAssets") {
        dependsOn("createBundleReleaseJsAndAssets")
    }
    tasks.register("bundleDebugJsAndAssets") {
        dependsOn("createBundleDebugJsAndAssets")
    }
}
