require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# React Native Permissions setup
permissions_path = '../../../node_modules/react-native-permissions/ios'

# Disable new architecture for compatibility
ENV['RCT_NEW_ARCH_ENABLED'] = '0'

platform :ios, '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# RNPermissions: when using use_frameworks!, force static libraries so handlers are detected
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
      def pod.build_type; Pod::BuildType.static_library; end
    end
  end
end

target 'Fishivo' do
  config = use_native_modules!
  
  # React Native Permissions - Add all needed permissions
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
  pod 'Permission-Contacts', :path => "#{permissions_path}/Contacts"
  pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse"
  pod 'Permission-LocationAccuracy', :path => "#{permissions_path}/LocationAccuracy"
  pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary"
  pod 'Permission-PhotoLibraryAddOnly', :path => "#{permissions_path}/PhotoLibraryAddOnly"


  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['hermes'] != 'false',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
    # Disable codegen for compatibility
    :fabric_enabled => false,
    # Disable new architecture for compatibility
    :new_arch_enabled => false
  )

  post_install do |installer|
    # MapLibre post-install hook
    $MLRN.post_install(installer) if defined?($MLRN)

    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Fix build issues for all targets
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Base iOS deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        
        # Fix non-modular includes error for all framework modules
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        
        # Suppress non-modular include warnings
        config.build_settings['OTHER_SWIFT_FLAGS'] = '$(inherited) -Xcc -Wno-error=non-modular-include-in-framework-module'
        
        # react-native-config environment setup
        if target.name == 'react-native-config'
          config.build_settings['ENVFILE'] = '$(PODS_ROOT)/../../.env'
        end
        
        # MapLibre specific fixes
        if target.name.include?('MapLibre') || target.name.include?('maplibre')
          config.build_settings['SWIFT_VERSION'] = '5.9'
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        end
        
        # React Native framework modules fix
        if target.name.start_with?('React-') || target.name == 'React'
          config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_NO_CONFIG=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_MOBILE=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_USE_LIBCPP=1'
        end
      end
    end
  end
end
